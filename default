#
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80;
	return 301 https://$host$request_uri;
}

server {
	listen 443 default_server ssl;
	server_name ec2-52-59-230-187.eu-central-1.compute.amazonaws.com;
	#return 301 https://$host$request_uri;
	#rewrite ^/(.*)$ https://$server_name/$1 permanent;

	location /api/ {
		proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://ec2-52-59-230-187.eu-central-1.compute.amazonaws.com:3002/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;


        }

	location / {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-NginX-Proxy true;
                proxy_pass http://ec2-52-59-230-187.eu-central-1.compute.amazonaws.com:3000/;
                proxy_ssl_session_reuse off;
                proxy_set_header Host $http_host;
                proxy_cache_bypass $http_upgrade;
                proxy_redirect off;
        }

#}


#server {
	#listen 443 ssl;
#	server_name ec2-52-59-230-187.eu-central-1.compute.amazonaws.com;

	# mod_rewrite
	#try_files $uri $uri/ /index.php?$args;

	# http://www.selfsignedcertificate.com/
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	ssl_certificate      /etc/nginx/sslf/cert.pem;
	ssl_certificate_key  /etc/nginx/sslf/cert.key;

	ssl_session_cache    shared:SSL:1m;
	ssl_session_timeout  5m;

	ssl_ciphers  HIGH:!aNULL:!MD5;
	ssl_prefer_server_ciphers  on;

	root /var/www/html;

	index index.php index.html index.htm index.nginx-debian.html;

	#location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		#rewrite ^(.*)$ /index.php?u=$1 last;
		#try_files $uri $uri/ /index.html;
		try_files $uri $uri/ =404;
	#}

	#location /api/ {
	#        proxy_set_header X-Real-IP $remote_addr;
        #        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #        proxy_set_header X-NginX-Proxy true;
        #        proxy_pass http://localhost:3000/;
        #        proxy_ssl_session_reuse off;
        #        proxy_set_header Host $http_host;
        #        proxy_cache_bypass $http_upgrade;
        #        proxy_redirect off;
	#}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	location ~ \.php$ {
		rewrite ^(.*)$ /index.php?u=$1 last;
		fastcgi_split_path_info  ^(.+\.php)(/.+)$;

		#try_files $uri =404;
		fastcgi_pass unix:/var/run/php5-fpm.sock;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param   PATH_TRANSLATED     $document_root$fastcgi_path_info;
		fastcgi_param   PATH_INFO         $fastcgi_path_info;
		include fastcgi_params;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
